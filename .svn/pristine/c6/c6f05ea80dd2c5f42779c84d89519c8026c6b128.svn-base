/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Basic typings for the CKEditor5 elements.
 */
export var CKEditor5;
/**
 * Basic typings for the CKEditor5 elements.
 */
(function (CKEditor5) {
    /**
     * The CKEditor5 editor constructor.
     * @record
     */
    function EditorConstructor() { }
    CKEditor5.EditorConstructor = EditorConstructor;
    /** @type {?} */
    EditorConstructor.prototype.create;
    /**
     * The CKEditor5 editor config.
     * @record
     */
    function Config() { }
    CKEditor5.Config = Config;
    // unsupported: template constraints.
    /**
     * The event object passed to CKEditor5 event callbacks.
     *
     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_utils_eventinfo-EventInfo.html
     * @record
     * @template EventName
     */
    function EventInfo() { }
    CKEditor5.EventInfo = EventInfo;
    /** @type {?} */
    EventInfo.prototype.name;
    /** @type {?} */
    EventInfo.prototype.path;
    /** @type {?} */
    EventInfo.prototype.source;
    /** @type {?|undefined} */
    EventInfo.prototype.return;
    /** @type {?} */
    EventInfo.prototype.off;
    /** @type {?} */
    EventInfo.prototype.stop;
    /**
     * The base Editor class.
     *
     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html
     * @record
     */
    function BaseEditor() { }
    CKEditor5.BaseEditor = BaseEditor;
    /** @type {?} */
    BaseEditor.prototype.commands;
    /** @type {?} */
    BaseEditor.prototype.config;
    /** @type {?} */
    BaseEditor.prototype.conversion;
    /** @type {?} */
    BaseEditor.prototype.data;
    /** @type {?} */
    BaseEditor.prototype.editing;
    /** @type {?} */
    BaseEditor.prototype.keystrokes;
    /** @type {?} */
    BaseEditor.prototype.locale;
    /** @type {?} */
    BaseEditor.prototype.model;
    /** @type {?} */
    BaseEditor.prototype.plugins;
    /** @type {?} */
    BaseEditor.prototype.state;
    /** @type {?} */
    BaseEditor.prototype.isReadOnly;
    /** @type {?} */
    BaseEditor.prototype.delegate;
    /** @type {?} */
    BaseEditor.prototype.destroy;
    /** @type {?} */
    BaseEditor.prototype.execute;
    /** @type {?} */
    BaseEditor.prototype.fire;
    /** @type {?} */
    BaseEditor.prototype.listenTo;
    /** @type {?} */
    BaseEditor.prototype.off;
    /** @type {?} */
    BaseEditor.prototype.on;
    /** @type {?} */
    BaseEditor.prototype.once;
    /** @type {?} */
    BaseEditor.prototype.stopListening;
    /** @type {?} */
    BaseEditor.prototype.t;
    /**
     * The CKEditor5 DataApi interface.
     *
     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html.
     * @record
     */
    function DataApi() { }
    CKEditor5.DataApi = DataApi;
    /** @type {?} */
    DataApi.prototype.getData;
    /** @type {?} */
    DataApi.prototype.setData;
    /**
     * A CKEditor5 editor that implements the
     * [DataApi interface](https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html).
     * E.g. the `ClassicEditor`, `InlineEditor`, etc.
     * @record
     */
    function Editor() { }
    CKEditor5.Editor = Editor;
})(CKEditor5 || (CKEditor5 = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tlZGl0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2tlZGl0b3IvY2tlZGl0b3I1LWFuZ3VsYXIvIiwic291cmNlcyI6WyJja2VkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsTUFBTSxLQUFXLFNBQVM7Ozs7QUFBMUIsV0FBaUIsU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FBVCxTQUFTLEtBQVQsU0FBUyxRQStFekIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2ljIHR5cGluZ3MgZm9yIHRoZSBDS0VkaXRvcjUgZWxlbWVudHMuXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgQ0tFZGl0b3I1IHtcblx0LyoqXG5cdCAqIFRoZSBDS0VkaXRvcjUgZWRpdG9yIGNvbnN0cnVjdG9yLlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBFZGl0b3JDb25zdHJ1Y3RvciB7XG5cdFx0Y3JlYXRlKCBzb3VyY2VFbGVtZW50T3JEYXRhOiBIVE1MRWxlbWVudCB8IHN0cmluZywgY29uZmlnPzogQ29uZmlnICk6IFByb21pc2U8RWRpdG9yPjtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgQ0tFZGl0b3I1IGVkaXRvciBjb25maWcuXG5cdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XG5cdFx0WyBrZXk6IHN0cmluZyBdOiBhbnk7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGV2ZW50IG9iamVjdCBwYXNzZWQgdG8gQ0tFZGl0b3I1IGV2ZW50IGNhbGxiYWNrcy5cblx0ICpcblx0ICogU2VlIGh0dHBzOi8vY2tlZGl0b3IuY29tL2RvY3MvY2tlZGl0b3I1L2xhdGVzdC9hcGkvbW9kdWxlX3V0aWxzX2V2ZW50aW5mby1FdmVudEluZm8uaHRtbFxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBFdmVudEluZm88RXZlbnROYW1lIGV4dGVuZHMgc3RyaW5nPiB7XG5cdFx0cmVhZG9ubHkgbmFtZTogRXZlbnROYW1lO1xuXHRcdHJlYWRvbmx5IHBhdGg6IGFueVtdO1xuXHRcdHJlYWRvbmx5IHNvdXJjZTogYW55O1xuXHRcdHJldHVybj86IGFueTtcblxuXHRcdG9mZigpOiB2b2lkO1xuXHRcdHN0b3AoKTogdm9pZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYmFzZSBFZGl0b3IgY2xhc3MuXG5cdCAqXG5cdCAqIFNlZSBodHRwczovL2NrZWRpdG9yLmNvbS9kb2NzL2NrZWRpdG9yNS9sYXRlc3QvYXBpL21vZHVsZV9jb3JlX2VkaXRvcl9lZGl0b3ItRWRpdG9yLmh0bWxcblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQmFzZUVkaXRvciB7XG5cdFx0cmVhZG9ubHkgY29tbWFuZHM6IGFueTtcblx0XHRyZWFkb25seSBjb25maWc6IGFueTtcblx0XHRyZWFkb25seSBjb252ZXJzaW9uOiBhbnk7XG5cdFx0cmVhZG9ubHkgZGF0YTogYW55O1xuXHRcdHJlYWRvbmx5IGVkaXRpbmc6IGFueTtcblx0XHRyZWFkb25seSBrZXlzdHJva2VzOiBhbnk7XG5cdFx0cmVhZG9ubHkgbG9jYWxlOiBhbnk7XG5cdFx0cmVhZG9ubHkgbW9kZWw6IGFueTtcblx0XHRyZWFkb25seSBwbHVnaW5zOiBhbnk7XG5cdFx0cmVhZG9ubHkgc3RhdGU6ICdpbml0aWFsaXppbmcnIHwgJ3JlYWR5JyB8ICdkZXN0cm95ZWQnO1xuXG5cdFx0aXNSZWFkT25seTogYm9vbGVhbjtcblxuXHRcdGRlbGVnYXRlKCBldmVudHM6IHN0cmluZ1tdICk6IGFueTtcblx0XHRkZXN0cm95KCk6IFByb21pc2U8dm9pZD47XG5cdFx0ZXhlY3V0ZSggY29tbWFuZE5hbWU6IHN0cmluZywgLi4ucGFyYW1zOiBhbnlbXSApOiBhbnk7XG5cdFx0ZmlyZSggZXZlbnROYW1lOiBzdHJpbmcsIGFyZ3M/OiBhbnkgKTogYW55O1xuXHRcdGxpc3RlblRvKCBlbWl0dGVyOiBhbnksIGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24sIG9wdGlvbnM/OiBhbnkgKTogdm9pZDtcblx0XHRvZmYoIGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24gKTogdm9pZDtcblx0XHRvbiggZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbiwgb3B0aW9ucz86IGFueSApOiB2b2lkO1xuXHRcdG9uY2UoIGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24sIG9wdGlvbnM/OiBhbnkgKTogdm9pZDtcblx0XHRzdG9wTGlzdGVuaW5nKCBlbWl0dGVyOiBhbnksIGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24gKTogdm9pZDtcblx0XHR0KCAuLi5hcmdzOiBhbnlbXSApOiB2b2lkO1xuXG5cdFx0WyBwcm9wZXJ0eTogc3RyaW5nIF06IGFueTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgQ0tFZGl0b3I1IERhdGFBcGkgaW50ZXJmYWNlLlxuXHQgKlxuXHQgKiBTZWUgaHR0cHM6Ly9ja2VkaXRvci5jb20vZG9jcy9ja2VkaXRvcjUvbGF0ZXN0L2FwaS9tb2R1bGVfY29yZV9lZGl0b3JfdXRpbHNfZGF0YWFwaW1peGluLURhdGFBcGkuaHRtbC5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgRGF0YUFwaSB7XG5cdFx0Z2V0RGF0YSgpOiBzdHJpbmc7XG5cdFx0c2V0RGF0YSggZGF0YTogc3RyaW5nICk6IHZvaWQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBDS0VkaXRvcjUgZWRpdG9yIHRoYXQgaW1wbGVtZW50cyB0aGVcblx0ICogW0RhdGFBcGkgaW50ZXJmYWNlXShodHRwczovL2NrZWRpdG9yLmNvbS9kb2NzL2NrZWRpdG9yNS9sYXRlc3QvYXBpL21vZHVsZV9jb3JlX2VkaXRvcl91dGlsc19kYXRhYXBpbWl4aW4tRGF0YUFwaS5odG1sKS5cblx0ICogRS5nLiB0aGUgYENsYXNzaWNFZGl0b3JgLCBgSW5saW5lRWRpdG9yYCwgZXRjLlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBFZGl0b3IgZXh0ZW5kcyBCYXNlRWRpdG9yLCBEYXRhQXBpIHt9XG59XG4iXX0=