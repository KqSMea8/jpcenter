{"version":3,"sources":["ng://@ckeditor/ckeditor5-angular/ckeditor.component.ts","ng://@ckeditor/ckeditor5-angular/ckeditor.module.ts"],"names":["CKEditorComponent","elementRef","ngZone","EventEmitter","this","Object","defineProperty","prototype","editorInstance","isReadOnly","initialIsDisabled","isDisabled","setDisabledState","ngAfterViewInit","_this","runOutsideAngular","createEditor","ngOnDestroy","destroy","writeValue","value","setData","data","registerOnChange","callback","cvaOnChange","registerOnTouched","cvaOnTouched","element","document","createElement","tagName","nativeElement","appendChild","create","config","then","editor","run","ready","emit","setUpEditorEvents","catch","err","console","error","stack","modelDocument","model","viewDocument","editing","view","on","evt","getData","change","event","focus","blur","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","NgZone","Input","Output","NgModule","imports","FormsModule","CommonModule","declarations","exports"],"mappings":"mcAkJC,SAAAA,EAAaC,EAAwBC,aAvFrB,gBAOG,iBAwBD,IAAIC,EAAAA,yBAOwB,IAAIA,EAAAA,uBAOR,IAAIA,EAAAA,wBAOF,IAAIA,EAAAA,iCAKC,6BAMrB,EAyB3BC,KAAKF,OAASA,EACdE,KAAKH,WAAaA,SA3EnBI,OAAAC,eAAaN,EAAAO,UAAA,WAAQ,KAIrB,WACC,OAAKH,KAAKI,eACFJ,KAAKI,eAAeC,WAGrBL,KAAKM,uBATb,SAAuBC,GACtBP,KAAKQ,iBAAkBD,oCA8ExBX,EAAAO,UAAAM,gBAAA,WAAA,IAAAC,EAAAV,KACCA,KAAKF,OAAOa,kBAAmB,WAC9BD,EAAKE,kBAKPhB,EAAAO,UAAAU,YAAA,WACMb,KAAKI,iBACTJ,KAAKI,eAAeU,UACpBd,KAAKI,eAAiB,OAKxBR,EAAAO,UAAAY,WAAA,SAAYC,GAGI,OAAVA,IACJA,EAAQ,IAIJhB,KAAKI,eACTJ,KAAKI,eAAea,QAASD,GAI7BhB,KAAKkB,KAAOF,GAKdpB,EAAAO,UAAAgB,iBAAA,SAAkBC,GACjBpB,KAAKqB,YAAcD,GAIpBxB,EAAAO,UAAAmB,kBAAA,SAAmBF,GAClBpB,KAAKuB,aAAeH,GAIrBxB,EAAAO,UAAAK,iBAAA,SAAkBD,GAEZP,KAAKI,eACTJ,KAAKI,eAAeC,WAAaE,EAIjCP,KAAKM,kBAAoBC,GAQnBX,EAAAO,UAAAS,mCACDY,EAAUC,SAASC,cAAe1B,KAAK2B,SAI7C,OAFA3B,KAAKH,WAAW+B,cAAcC,YAAaL,GAEpCxB,KAAW,OAAE8B,OAAQN,EAASxB,KAAK+B,QACxCC,KAAM,SAAAC,IACNvB,EAAKN,eAAiB6B,GAEfhB,QAASP,EAAKQ,MAEhBR,EAAKJ,oBACT2B,EAAO5B,WAAaK,EAAKJ,mBAG1BI,EAAKZ,OAAOoC,IAAK,WAChBxB,EAAKyB,MAAMC,KAAMH,KAGlBvB,EAAK2B,kBAAmBJ,KAExBK,SAAO,SAAEC,GACTC,QAAQC,MAAOF,EAAIG,UAOd9C,EAAAO,UAAAkC,2BAAmBJ,cACpBU,EAAgBV,EAAOW,MAAMnB,SAC7BoB,EAAeZ,EAAOa,QAAQC,KAAKtB,SAEzCkB,EAAcK,GAAI,cAAe,SAAEC,GAClC,IAAM/B,EAAOe,EAAOiB,UAEpBxC,EAAKZ,OAAOoC,IAAK,WACXxB,EAAKW,aACTX,EAAKW,YAAaH,GAGnBR,EAAKyC,OAAOf,KAAM,CAAEgB,MAAOH,EAAKhB,OAAMA,QAIxCY,EAAaG,GAAI,QAAS,SAAEC,GAC3BvC,EAAKZ,OAAOoC,IAAK,WAChBxB,EAAK2C,MAAMjB,KAAM,CAAEgB,MAAOH,EAAKhB,OAAMA,QAIvCY,EAAaG,GAAI,OAAQ,SAAEC,GAC1BvC,EAAKZ,OAAOoC,IAAK,WACXxB,EAAKa,cACTb,EAAKa,eAGNb,EAAK4C,KAAKlB,KAAM,CAAEgB,MAAOH,EAAKhB,OAAMA,6BApPvCsB,EAAAA,UAASC,KAAA,CAAE,CACXC,SAAU,WACVC,SAAU,8BAGVC,UAAW,CACV,CACCC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAY,WAAM,OAAAnE,IAC/BoE,OAAO,iDAnBTC,EAAAA,kBAJAC,EAAAA,0CAqCCC,EAAAA,sBAOAA,EAAAA,oBAMAA,EAAAA,uBAOAA,EAAAA,wBAOAA,EAAAA,qBAiBAC,EAAAA,uBAOAA,EAAAA,qBAOAA,EAAAA,sBAOAA,EAAAA,qECrGDC,EAAAA,SAAQb,KAAA,CAAE,CACVc,QAAS,CAAEC,EAAAA,YAAaC,EAAAA,cACxBC,aAAc,CAAE7E,GAChB8E,QAAS,CAAE9E","sourcesContent":["/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport {\n\tComponent,\n\tInput,\n\tOutput,\n\tNgZone,\n\tEventEmitter,\n\tforwardRef,\n\tAfterViewInit, OnDestroy,\n\tElementRef\n} from '@angular/core';\n\nimport {\n\tControlValueAccessor,\n\tNG_VALUE_ACCESSOR\n} from '@angular/forms';\n\nimport { CKEditor5 } from './ckeditor';\n\n@Component( {\n\tselector: 'ckeditor',\n\ttemplate: '<ng-template></ng-template>',\n\n\t// Integration with @angular/forms.\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef( () => CKEditorComponent ),\n\t\t\tmulti: true,\n\t\t}\n\t]\n} )\nexport class CKEditorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\n\t/**\n\t * The reference to the DOM element created by the component.\n\t */\n\tprivate elementRef!: ElementRef<HTMLElement>;\n\n\t/**\n\t * The constructor of the editor to be used for the instance of the component.\n\t * It can be e.g. the `ClassicEditorBuild`, `InlineEditorBuild` or some custom editor.\n\t */\n\t@Input() editor?: CKEditor5.EditorConstructor;\n\n\t/**\n\t * The configuration of the editor.\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n\t * to learn more.\n\t */\n\t@Input() config?: CKEditor5.Config;\n\n\t/**\n\t * The initial data of the editor. Useful when not using the ngModel.\n\t * See https://angular.io/api/forms/NgModel to learn more.\n\t */\n\t@Input() data = '';\n\n\t/**\n\t * Tag name of the editor component.\n\t *\n\t * The default tag is 'div'.\n\t */\n\t@Input() tagName = 'div';\n\n\t/**\n\t * When set `true`, the editor becomes read-only.\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n\t * to learn more.\n\t */\n\t@Input() set disabled( isDisabled: boolean ) {\n\t\tthis.setDisabledState( isDisabled );\n\t}\n\n\tget disabled() {\n\t\tif ( this.editorInstance ) {\n\t\t\treturn this.editorInstance.isReadOnly;\n\t\t}\n\n\t\treturn this.initialIsDisabled;\n\t}\n\n\t/**\n\t * Fires when the editor is ready. It corresponds with the `editor#ready`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n\t * event.\n\t */\n\t@Output() ready = new EventEmitter<CKEditor5.Editor>();\n\n\t/**\n\t * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n\t * event.\n\t */\n\t@Output() change: EventEmitter<ChangeEvent> = new EventEmitter<ChangeEvent>();\n\n\t/**\n\t * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n\t * event.\n\t */\n\t@Output() blur: EventEmitter<BlurEvent> = new EventEmitter<BlurEvent>();\n\n\t/**\n\t * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n\t * event.\n\t */\n\t@Output() focus: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n\t/**\n\t * The instance of the editor created by this component.\n\t */\n\tpublic editorInstance: CKEditor5.Editor | null = null;\n\n\t/**\n\t * If the component is readâonly before the editor instance is created, it remembers that state,\n\t * so the editor can become readâonly once it is ready.\n\t */\n\tprivate initialIsDisabled = false;\n\n\t/**\n\t * An instance of https://angular.io/api/core/NgZone to allow the interaction with the editor\n\t * withing the Angular event loop.\n\t */\n\tprivate ngZone: NgZone;\n\n\t/**\n\t * A callback executed when the content of the editor changes. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tprivate cvaOnChange?: ( data: string ) => void;\n\n\t/**\n\t * A callback executed when the editor has been blurred. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tprivate cvaOnTouched?: () => void;\n\n\tconstructor( elementRef: ElementRef, ngZone: NgZone ) {\n\t\tthis.ngZone = ngZone;\n\t\tthis.elementRef = elementRef;\n\t}\n\n\t// Implementing the AfterViewInit interface.\n\tngAfterViewInit() {\n\t\tthis.ngZone.runOutsideAngular( () => {\n\t\t\tthis.createEditor();\n\t\t} );\n\t}\n\n\t// Implementing the OnDestroy interface.\n\tngOnDestroy() {\n\t\tif ( this.editorInstance ) {\n\t\t\tthis.editorInstance.destroy();\n\t\t\tthis.editorInstance = null;\n\t\t}\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\twriteValue( value: string | null ): void {\n\t\t// This method is called with the `null` value when the form resets.\n\t\t// A component's responsibility is to restore to the initial state.\n\t\tif ( value === null ) {\n\t\t\tvalue = '';\n\t\t}\n\n\t\t// If already initialized.\n\t\tif ( this.editorInstance ) {\n\t\t\tthis.editorInstance.setData( value );\n\t\t}\n\t\t// If not, wait for it to be ready; store the data.\n\t\telse {\n\t\t\tthis.data = value;\n\t\t}\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tregisterOnChange( callback: ( data: string ) => void ): void {\n\t\tthis.cvaOnChange = callback;\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tregisterOnTouched( callback: () => void ): void {\n\t\tthis.cvaOnTouched = callback;\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tsetDisabledState( isDisabled: boolean ): void {\n\t\t// If already initialized\n\t\tif ( this.editorInstance ) {\n\t\t\tthis.editorInstance.isReadOnly = isDisabled;\n\t\t}\n\t\t// If not, wait for it to be ready; store the state.\n\t\telse {\n\t\t\tthis.initialIsDisabled = isDisabled;\n\t\t}\n\t}\n\n\t/**\n\t * Creates the editor instance, sets initial editor data,\n\t * then integrates the editor with the Angular component.\n\t */\n\tprivate createEditor(): Promise<any> {\n\t\tconst element = document.createElement( this.tagName );\n\n\t\tthis.elementRef.nativeElement.appendChild( element );\n\n\t\treturn this.editor!.create( element, this.config )\n\t\t\t.then( editor => {\n\t\t\t\tthis.editorInstance = editor;\n\n\t\t\t\teditor.setData( this.data );\n\n\t\t\t\tif ( this.initialIsDisabled ) {\n\t\t\t\t\teditor.isReadOnly = this.initialIsDisabled;\n\t\t\t\t}\n\n\t\t\t\tthis.ngZone.run( () => {\n\t\t\t\t\tthis.ready.emit( editor );\n\t\t\t\t} );\n\n\t\t\t\tthis.setUpEditorEvents( editor );\n\t\t\t} )\n\t\t\t.catch( ( err: Error ) => {\n\t\t\t\tconsole.error( err.stack );\n\t\t\t} );\n\t}\n\n\t/**\n\t * Integrates the editor with the component by attaching related event listeners.\n\t */\n\tprivate setUpEditorEvents( editor: CKEditor5.Editor ): void {\n\t\tconst modelDocument = editor.model.document;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tmodelDocument.on( 'change:data', ( evt: CKEditor5.EventInfo<'change:data'> ) => {\n\t\t\tconst data = editor.getData();\n\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tif ( this.cvaOnChange ) {\n\t\t\t\t\tthis.cvaOnChange( data );\n\t\t\t\t}\n\n\t\t\t\tthis.change.emit( { event: evt, editor } );\n\t\t\t} );\n\t\t} );\n\n\t\tviewDocument.on( 'focus', ( evt: CKEditor5.EventInfo<'focus'> ) => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.focus.emit( { event: evt, editor } );\n\t\t\t} );\n\t\t} );\n\n\t\tviewDocument.on( 'blur', ( evt: CKEditor5.EventInfo<'blur'> ) => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tif ( this.cvaOnTouched ) {\n\t\t\t\t\tthis.cvaOnTouched();\n\t\t\t\t}\n\n\t\t\t\tthis.blur.emit( { event: evt, editor } );\n\t\t\t} );\n\t\t} );\n\t}\n}\n\nexport interface BlurEvent {\n\tevent: CKEditor5.EventInfo<'blur'>;\n\teditor: CKEditor5.Editor;\n}\n\nexport interface FocusEvent {\n\tevent: CKEditor5.EventInfo<'focus'>;\n\teditor: CKEditor5.Editor;\n}\n\nexport interface ChangeEvent {\n\tevent: CKEditor5.EventInfo<'change:data'>;\n\teditor: CKEditor5.Editor;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CKEditorComponent } from './ckeditor.component';\n\n@NgModule( {\n\timports: [ FormsModule, CommonModule ],\n\tdeclarations: [ CKEditorComponent ],\n\texports: [ CKEditorComponent ]\n} )\nexport class CKEditorModule {}\n"]}